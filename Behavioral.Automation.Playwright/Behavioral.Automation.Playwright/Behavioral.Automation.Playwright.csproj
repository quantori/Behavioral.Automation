<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Authors>Quantori Inc.</Authors>
        <Description>Platform design is based on strong and well-defined borderline between procedural test cases structure and object-oriented code-behind.

            We think that test cases implementation approach (inside BDD paradigm) is literaly the same across different applications. That means that we can define and reuse grammar structures across different application domains. On top of this, while talking about single page web applications, we may take into account that atomic controls behavior is also the same across different domains.

            The whole automation code is divided into the following parts:
            - Feature files
            - Bindings
            - Wrappers
            - Infrastructure bindings
            - UI structure descriptive code
            - Supportive code
        </Description>
        <Copyright>Quantori Inc.</Copyright>
        <PackageVersion>0.1</PackageVersion>
        <RepositoryUrl>https://github.com/quantori/Behavioral.Automation</RepositoryUrl>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>

        <TargetFramework>net6.0</TargetFramework>
        <Nullable>enable</Nullable>

        <IsPackable>false</IsPackable>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.Extensions.Configuration" Version="6.0.1" />
        <PackageReference Include="Microsoft.Playwright" Version="1.22.0" />
        <PackageReference Include="SpecFlow" Version="3.9.74" />
        <PackageReference Include="NUnit" Version="3.13.2" />
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Include="..\..\Behavioral.Automation.Configs\Behavioral.Automation.Configs.csproj" />
    </ItemGroup>

</Project>
